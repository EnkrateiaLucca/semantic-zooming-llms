{"original": "We introduce AnyTool, a large language model\nagent designed to revolutionize the utilization of\na vast array of tools in addressing user queries.\nWe utilize over 16,000 APIs from Rapid API,\noperating under the assumption that a subset of\nthese APIs could potentially resolve the queries.\nAnyTool primarily incorporates three elements:\nan API retriever with a hierarchical structure, a\nsolver aimed at resolving user queries using a se-\nlected set of API candidates, and a self-reflection\nmechanism, which re-activates AnyTool if the ini-\ntial solution proves impracticable. AnyTool is\npowered by the function calling feature of GPT-4,\neliminating the need for training external modules.\nWe also revisit the evaluation protocol introduced\nby previous works and identify a limitation in this\nprotocol that leads to an artificially high pass rate.\nBy revising the evaluation protocol to better re-\nflect practical application scenarios, we introduce\nan additional benchmark, termed AnyToolBench.\nExperiments across various datasets demonstrate\nthe superiority of our AnyTool over strong base-\nlines such as ToolLLM and a GPT-4 variant tai-\nlored for tool utilization. For instance, AnyTool\noutperforms ToolLLM by +35.4% in terms of\naverage pass rate on ToolBench. Code will be\navailable at https://github.com/dyabel/AnyTool.\n1. Introduction\nFrom the dawn of civilization, humanity has embarked on\na relentless journey of discovery and innovation, mastering\nan ever-expanding array of tools to enhance our capabilities\nand increase production efficiency. As we have evolved,\nso have our tools, transitioning from simple stone imple-\nments to complex machines and beyond. Today, we stand\nat the forefront of a new era, reaping the benefits of the\nrapid developments in artificial intelligence, particularly the\nrecent advances in large language models (LLMs) (Brown\net al., 2020; Touvron et al., 2023a;b; Chowdhery et al., 2023;\nAchiam et al., 2023; Ouyang et al., 2022). A pivotal chal-API Pool (16K+ APIs)\n...\nAnyTool\nSelf-Reflection Solution\nQuery\nAPI-Retriever\nSolver\n(a) AnyTool addresses user queries by leveraging 16k+ APIs.\nIt integrates a hierarchical API-retriever, a solver, and a self-\nreflection mechanism in a closed loop, all operating without\nthe need for additional training.\n(b) Comparison with ToolLLM and a GPT-4 variant tailored for\ntool utilization across six subsets of ToolBench (Qin et al., 2023b),\nusing pass rate defined in Eq 2 as the evaluation metric.\nFigure 1: (a) Illustration of AnyTool. (b) Comparison in\nperformance.\nlenge now is learning how to drive LLMs to effectively use\ntools (Qin et al., 2023a; Xu et al., 2023; Cai et al., 2023;\nSong et al., 2023; Ruan et al., 2023; Shen et al., 2023; Hao\net al., 2023), a task that could redefine our interaction with\ntechnology. Towards this end, we introduce AnyTool, a\nGPT-4-empowered agent, as depicted in Figure 1a. It is\ndesigned to effectively leverage more than 16,000 APIs to\n1\narXiv:2402.04253v1  [cs.CL]  6 Feb 2024\nAnyTool: Self-Reflective, Hierarchical Agents for Large-Scale API CallsMeta-Agent\nCategory\nAPI-Candidate Pool\nFunction List\ncreate_agent_category_level(category_name)\n...\nQuery\nget_tools_in_category(category_name)\nget_tool_descriptions([tool_list])\nfinish_search( )\nget_tools_in_category(category_name)\nget_tool_descriptions([tool_list])Sports MusicFinance\n...\nTool-1 Tool-2 Tool-3 Tool-M\n...\nAPI-1 API-2 API-3 API-D\nadd_API_into_API_pool([API_name_list])\nget_API_details(API_name)\ncheck_if_request_solvable( )Tool\nAPI\nAPI-2 API-1 API-D; ...\nStructure of 16K+ APIs\n: Category Agent\n: Tool Agent\nSelf-ReflectionSolved SolutionSolver Unsolved\n...\nfinish_search( )\nfinish_search( )\n...\nor\nAPI Retriever\ncreate_agent_tool_level ([tool_list])\nget_APIs_in_tool(tool_name)\nFigure 2: Overview of AnyTool. It primarily consists of a hierarchical API retriever tasked with identifying the most\nrelevant API candidates to the user query from a large API pool, a solver aimed at addressing the queries using the generated\nAPI-candidate pool, and a self-reflection mechanism. The hierarchical structure includes a meta-agent linked with several\ncategory agents, each of which manages a collection of tool agents. We leverage the API structure defined by Rapid API as\na guideline. Each type of agent is assigned several functions that it can use to explore the API space. Refer to Table 8 in the\nappendix for the details of each function.\naddress user queries, with a significant performance leap as\ndepicted in Figure 1b.\nPrevious research (Qin et al., 2023b) formulated tool uti-\nlization in a dual-phase approach: initially retrieving, then\nresolving. Specifically, the first phase involves retrieving the\nmost pertinent APIs from a substantial collection of 16K+\nAPIs in response to user queries. The subsequent phase fo-\ncuses on utilizing these chosen APIs to address user queries.\nOur AnyTool uses this design principle while introducing\nfour distinct characteristics (see Figure 2 for an overview):\nPlug-and-Play. Our AnyTool does not require the training\nof any modules, except for the function-calling feature of\nGPT-4 (Achiam et al., 2023). This aspect sets it apart from\nexisting methods like ToolLLM, which necessitates training\nan API retriever capable of selecting a set of candidate APIs\nfrom the API pool (Qin et al., 2023b).\nHierarchical Structure. To identify the most relevant APIs\nfor user queries, we design a hierarchical structure within\nour API retriever. This structure is composed of three tiers,\neach containing one or multiple agents with diverse roles.\nThis arrangement is inspired by the divide-and-conquer ap-\nproach. Additionally, we effectively incorporate the API\ncategorization suggested by Rapid API into our hierarchical\nstructure. Consequently, this significantly reduces the search\nscope for each agent and overcomes constraints related to\nthe maximum context length in LLMs.\nFigure 3: The performance of our AnyTool on different\ndatasets (each denoted by a curve) improves as the number\nof self-reflection rounds increases. ATB: AnyToolBench.\nSelf-Reflection Mechanism. Our AnyTool is designed to\naddress user queries through a process of initial attempt\nfollowed by reflection. Upon receiving a query, AnyTool\nsuggests a solution, which is then evaluated for feasibility\nby GPT-4. In cases where the proposed solution is deemed\nimpractical, AnyTool is re-activated, with the considera-\ntion of reasons for failure and relevant historical contexts.\nThis mechanism significantly reduces the tendency to \u201cover-\nsearch\u201d for simpler queries, while also providing a more\ncontext-rich and in-depth search for complex queries. This\nclosed-loop system enhances the efficiency and effective-\nness of the query resolution process. Figure 3 shows how\nthe pass rate improves w.r.t. the self-reflection rounds. With\n2\nAnyTool: Self-Reflective, Hierarchical Agents for Large-Scale API Calls\nonly 4-6 self-reflection iterations, the pass rate improves by\nup to 20% across all datasets.\nEvaluation for Realistic Scenarios. The evaluation frame-\nwork presented in ToolBench (Qin et al., 2023b) commences\nwith categorizing user queries as either solvable or non-\nsolvable, employing a set of reference APIs. Following this,\nthe solvable queries undergo further scrutiny to determine if\nthey are successfully addressed or not. However, for those\nnon-solvable queries, the evaluation system regards them as\nsolved when calculating the pass rate, leading to an artifi-\ncially high pass rate. Our study delves into the intricacies of\nthis evaluation methodology and proposes a revised protocol\nthat better mirrors practical application scenarios.\nIn addition to evaluation on ToolBench, we introduce an\nextra benchmark, termed AnyToolBench, to facilitate the\napplication of our new evaluation protocol. Experimen-\ntally, AnyTool achieves state-of-the-art performance, sur-\npassing strong baselines such as ToolLLM and a version of\nGPT-4 specifically tailored for tool utilization across various\ndatasets, as illustrated in Figure 1b.", "Summary 1": "- Summary Level 1:\n    - 'AnyTool: A GPT-4-Powered Agent for API Utilization'\n    - 'AnyTool Outperforms Existing Methods in Tool Utilization'\n\n- Summary Level 2:\n    - AnyTool is a GPT-4-powered agent designed to effectively leverage over 16,000 APIs for addressing user queries.\n    - AnyTool outperforms existing methods like ToolLLM and a GPT-4 variant tailored for tool utilization.\n\n- Summary Level 3:\n    - Introduction of AnyTool: A GPT-4-Powered Agent for API Utilization\n    - AnyTool Outperforms Existing Methods in Tool Utilization\n        1. AnyTool addresses user queries using a hierarchical API-retriever, solver, and self-reflection mechanism.\n        2. AnyTool outperforms ToolLLM and a GPT-4 variant in tool utilization.\n\n- Summary Level 4:\n    - AnyTool, a GPT-4-powered agent, effectively leverages over 16,000 APIs for addressing user queries, outperforming existing methods like ToolLLM and a GPT-4 variant tailored for tool utilization. AnyTool consists of a hierarchical API-retriever, solver, and self-reflection mechanism.\n\n- Summary Level 5:\n    - AnyTool, a GPT-4-powered agent, introduces a new evaluation protocol that better reflects practical application scenarios, outperforming existing methods like ToolLLM and a GPT-4 variant tailored for tool utilization. The new evaluation protocol better mirrors real-world scenarios, leading to improved performance.\n\n- Summary Level 6:\n    - Introduction:\n        - AnyTool is a GPT-4-powered agent designed for API utilization.\n    - Methods:\n        - AnyTool uses a hierarchical API-retriever, solver, and self-reflection mechanism.\n    - Results:\n        - AnyTool outperforms existing methods like ToolLLM and a GPT-4 variant tailored for tool utilization.\n    - Conclusion:\n        - AnyTool effectively leverages over 16,000 APIs for addressing user queries, outperforming existing methods.\n\n- Summary Level 7:\n    - AnyTool, a GPT-4-powered agent, effectively leverages over 16,000 APIs for addressing user queries using a hierarchical API-retriever, solver, and self-reflection mechanism. AnyTool introduces a new evaluation protocol that better reflects practical application scenarios, leading to improved performance compared to existing methods like ToolLLM and a GPT-4 variant tailored for tool utilization. This new evaluation protocol better mirrors real-world scenarios, making it more suitable for decision-making.", "Summary 2": "AnyTool is a new language model agent that uses", "Summary 3": "- Introduction: AnyTool is a GPT-4-powered agent designed for effective API utilization, addressing user queries through a hierarchical API-retriever, solver, and self-reflection mechanism.\n\n- API Integration: AnyTool integrates a hierarchical API-retriever to identify relevant API candidates from a pool of 16k+ APIs, using a solver to address queries and a self-reflection mechanism for re-activation if the initial solution is impractical.\n\n- Comparison: AnyTool outperforms ToolLLM and a GPT-4 variant tailored for tool utilization, as shown in Figure 1b, demonstrating a significant performance leap.\n\n- Plug-and-Play and Hierarchical Structure: AnyTool does not require module training, and its hierarchical API-retriever has a three-tier design with agents that reduce search scope and overcome maximum context length constraints in LLMs.\n\n- Self-Reflection Mechanism: AnyTool's closed-loop system addresses user queries through initial attempt and reflection, enhancing efficiency and effectiveness in query resolution.\n\n- Evaluation for Realistic Scenarios: AnyTool introduces AnyToolBench for evaluation, addressing limitations in the ToolBench evaluation framework and achieving state-of-the-art performance.", "Summary 4": "AnyTool is a new tool that uses a large language model to utilize over 16,000 APIs to address user queries. It consists of an API retriever, a solver, and a self-reflection mechanism. The API retriever has a hierarchical structure and is designed to identify the most relevant APIs from a large pool. The solver uses the generated API-candidate pool to address queries. The self-reflection mechanism allows AnyTool to reflect on its initial solution and make improvements if necessary. AnyTool outperforms existing methods, such as ToolLLM, in addressing user queries. The authors also introduce a new evaluation protocol and benchmark, called AnyToolBench, to better reflect practical application scenarios.", "Summary 5": "AnyTool is a GPT-4-powered agent designed to leverage over 16,000 APIs for addressing user queries, outperforming existing models like ToolLLM by up to 35.4% in terms of average pass rate. AnyTool consists of a hierarchical API retriever, a solver, and a self-reflection mechanism, forming a closed-loop system that doesn't require additional training. Its hierarchical structure, inspired by a divide-and-conquer approach, incorporates API categorization from Rapid API, making it more efficient in identifying relevant APIs and overcoming context length limitations in LLMs. AnyTool's self-reflection mechanism, which includes GPT-4 for feasibility evaluation, improves search efficiency and effectiveness. A revised evaluation protocol is introduced to better reflect practical application scenarios, and AnyTool achieves state-of-the-art performance on the new AnyToolBench benchmark.", "Summary 6": "**Summary Level 6: Structured Summary**\n\n- **Introduction**\n  Introduces AnyTool, a GPT-4-powered agent designed to leverage over 16,000 APIs to address user queries, outperforming existing models like ToolLLM and a GPT-4 variant.\n\n- **Background**\n  Describes the evolution of tools throughout human history and the current challenge of driving large language models (LLMs) to effectively use tools, which could redefine human interaction with technology.\n\n- **AnyTool Overview**\n  Details the structure of AnyTool, which consists of a hierarchical API retriever, a solver, and a self-reflection mechanism, all operating within a closed loop without requiring additional training.\n\n- **Comparison with Existing Methods**\n  Compares AnyTool's performance with ToolLLM and a tailored GPT-4 variant across six subsets of ToolBench using the pass rate as the evaluation metric.\n\n- **AnyTool's Characteristics**\n  Details AnyTool's four distinct characteristics: Plug-and-Play, Hierarchical Structure, Self-Reflection Mechanism, and Evaluation for Realistic Scenarios.\n\n  - **Plug-and-Play**\n    Describes how AnyTool does not require training, except for the function-calling feature of GPT-4, unlike existing methods such as ToolLLM.\n\n  - **Hierarchical Structure**\n    Explains the hierarchical structure of the API retriever, composed of three tiers of agents, inspired by the divide-and-conquer approach, and incorporating API categorization from Rapid API.\n\n  - **Self-Reflection Mechanism**\n    Details the self-reflection mechanism that allows AnyTool to address user queries through an initial attempt followed by reflection, enhancing efficiency and effectiveness.\n\n  - **Evaluation for Realistic Scenarios**\n    Discusses the limitations of the existing evaluation framework and proposes a revised protocol for better practical application scenarios, introducing the AnyToolBench for evaluation.\n\n- **Experimental Results**\n  Describes AnyTool's state-of-the-art performance, surpassing strong baselines such as ToolLLM and a tailored GPT-4 variant across various datasets.", "Summary 7": "AnyTool is a GPT-4-powered agent designed to leverage over 16,000 APIs to address user queries, outperforming existing models like ToolLLM by +35.4% in terms of average pass rate (Qin et al., 2023b). AnyTool consists of a hierarchical API retriever, a solver, and a self-reflection mechanism (Figure 1a). The hierarchical API retriever operates in three tiers, utilizing a divide-and-conquer approach and incorporating API categorization from Rapid API (Figure 2). AnyTool's self-reflection mechanism involves an initial attempt at solving a query, followed by reflection and re-activation if the solution is impractical (Figure 3). This process enhances efficiency and effectiveness in query resolution. AnyTool's evaluation on ToolBench and the newly introduced AnyToolBench shows state-of-the-art performance, surpassing strong baselines (Figure 1b). The study also highlights the limitations of the existing evaluation protocol and proposes a revised evaluation protocol for practical application scenarios."}